// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteClient is the client API for Quote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteClient interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	GetAllQuotes(ctx context.Context, in *GetAllQuotesRequest, opts ...grpc.CallOption) (*GetAllQuotesResponse, error)
	CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error)
	DeleteQuote(ctx context.Context, in *DeleteQuoteRequest, opts ...grpc.CallOption) (*DeleteQuoteResponse, error)
	UpdateQuote(ctx context.Context, in *UpdateQuoteRequest, opts ...grpc.CallOption) (*UpdateQuoteResponse, error)
}

type quoteClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteClient(cc grpc.ClientConnInterface) QuoteClient {
	return &quoteClient{cc}
}

func (c *quoteClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, "/Quote/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) GetAllQuotes(ctx context.Context, in *GetAllQuotesRequest, opts ...grpc.CallOption) (*GetAllQuotesResponse, error) {
	out := new(GetAllQuotesResponse)
	err := c.cc.Invoke(ctx, "/Quote/GetAllQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error) {
	out := new(CreateQuoteResponse)
	err := c.cc.Invoke(ctx, "/Quote/CreateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) DeleteQuote(ctx context.Context, in *DeleteQuoteRequest, opts ...grpc.CallOption) (*DeleteQuoteResponse, error) {
	out := new(DeleteQuoteResponse)
	err := c.cc.Invoke(ctx, "/Quote/DeleteQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) UpdateQuote(ctx context.Context, in *UpdateQuoteRequest, opts ...grpc.CallOption) (*UpdateQuoteResponse, error) {
	out := new(UpdateQuoteResponse)
	err := c.cc.Invoke(ctx, "/Quote/UpdateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServer is the server API for Quote service.
// All implementations must embed UnimplementedQuoteServer
// for forward compatibility
type QuoteServer interface {
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	GetAllQuotes(context.Context, *GetAllQuotesRequest) (*GetAllQuotesResponse, error)
	CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error)
	DeleteQuote(context.Context, *DeleteQuoteRequest) (*DeleteQuoteResponse, error)
	UpdateQuote(context.Context, *UpdateQuoteRequest) (*UpdateQuoteResponse, error)
	mustEmbedUnimplementedQuoteServer()
}

// UnimplementedQuoteServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServer struct {
}

func (UnimplementedQuoteServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedQuoteServer) GetAllQuotes(context.Context, *GetAllQuotesRequest) (*GetAllQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuotes not implemented")
}
func (UnimplementedQuoteServer) CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuote not implemented")
}
func (UnimplementedQuoteServer) DeleteQuote(context.Context, *DeleteQuoteRequest) (*DeleteQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuote not implemented")
}
func (UnimplementedQuoteServer) UpdateQuote(context.Context, *UpdateQuoteRequest) (*UpdateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuote not implemented")
}
func (UnimplementedQuoteServer) mustEmbedUnimplementedQuoteServer() {}

// UnsafeQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServer will
// result in compilation errors.
type UnsafeQuoteServer interface {
	mustEmbedUnimplementedQuoteServer()
}

func RegisterQuoteServer(s grpc.ServiceRegistrar, srv QuoteServer) {
	s.RegisterService(&Quote_ServiceDesc, srv)
}

func _Quote_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Quote/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_GetAllQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).GetAllQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Quote/GetAllQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).GetAllQuotes(ctx, req.(*GetAllQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_CreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).CreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Quote/CreateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).CreateQuote(ctx, req.(*CreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_DeleteQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).DeleteQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Quote/DeleteQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).DeleteQuote(ctx, req.(*DeleteQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_UpdateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).UpdateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Quote/UpdateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).UpdateQuote(ctx, req.(*UpdateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quote_ServiceDesc is the grpc.ServiceDesc for Quote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Quote",
	HandlerType: (*QuoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuote",
			Handler:    _Quote_GetQuote_Handler,
		},
		{
			MethodName: "GetAllQuotes",
			Handler:    _Quote_GetAllQuotes_Handler,
		},
		{
			MethodName: "CreateQuote",
			Handler:    _Quote_CreateQuote_Handler,
		},
		{
			MethodName: "DeleteQuote",
			Handler:    _Quote_DeleteQuote_Handler,
		},
		{
			MethodName: "UpdateQuote",
			Handler:    _Quote_UpdateQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quote.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package opensource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpensourceClient is the client API for Opensource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpensourceClient interface {
	GetOpensource(ctx context.Context, in *GetOpensourceRequest, opts ...grpc.CallOption) (*GetOpensourceResponse, error)
	GetAllOpensources(ctx context.Context, in *GetAllOpensourcesRequest, opts ...grpc.CallOption) (*GetAllOpensourcesResponse, error)
	CreateOpensource(ctx context.Context, in *CreateOpensourceRequest, opts ...grpc.CallOption) (*CreateOpensourceResponse, error)
	DeleteOpensource(ctx context.Context, in *DeleteOpensourceRequest, opts ...grpc.CallOption) (*DeleteOpensourceResponse, error)
	UpdateOpensource(ctx context.Context, in *UpdateOpensourceRequest, opts ...grpc.CallOption) (*UpdateOpensourceResponse, error)
}

type opensourceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpensourceClient(cc grpc.ClientConnInterface) OpensourceClient {
	return &opensourceClient{cc}
}

func (c *opensourceClient) GetOpensource(ctx context.Context, in *GetOpensourceRequest, opts ...grpc.CallOption) (*GetOpensourceResponse, error) {
	out := new(GetOpensourceResponse)
	err := c.cc.Invoke(ctx, "/Opensource/GetOpensource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opensourceClient) GetAllOpensources(ctx context.Context, in *GetAllOpensourcesRequest, opts ...grpc.CallOption) (*GetAllOpensourcesResponse, error) {
	out := new(GetAllOpensourcesResponse)
	err := c.cc.Invoke(ctx, "/Opensource/GetAllOpensources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opensourceClient) CreateOpensource(ctx context.Context, in *CreateOpensourceRequest, opts ...grpc.CallOption) (*CreateOpensourceResponse, error) {
	out := new(CreateOpensourceResponse)
	err := c.cc.Invoke(ctx, "/Opensource/CreateOpensource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opensourceClient) DeleteOpensource(ctx context.Context, in *DeleteOpensourceRequest, opts ...grpc.CallOption) (*DeleteOpensourceResponse, error) {
	out := new(DeleteOpensourceResponse)
	err := c.cc.Invoke(ctx, "/Opensource/DeleteOpensource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opensourceClient) UpdateOpensource(ctx context.Context, in *UpdateOpensourceRequest, opts ...grpc.CallOption) (*UpdateOpensourceResponse, error) {
	out := new(UpdateOpensourceResponse)
	err := c.cc.Invoke(ctx, "/Opensource/UpdateOpensource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpensourceServer is the server API for Opensource service.
// All implementations must embed UnimplementedOpensourceServer
// for forward compatibility
type OpensourceServer interface {
	GetOpensource(context.Context, *GetOpensourceRequest) (*GetOpensourceResponse, error)
	GetAllOpensources(context.Context, *GetAllOpensourcesRequest) (*GetAllOpensourcesResponse, error)
	CreateOpensource(context.Context, *CreateOpensourceRequest) (*CreateOpensourceResponse, error)
	DeleteOpensource(context.Context, *DeleteOpensourceRequest) (*DeleteOpensourceResponse, error)
	UpdateOpensource(context.Context, *UpdateOpensourceRequest) (*UpdateOpensourceResponse, error)
	mustEmbedUnimplementedOpensourceServer()
}

// UnimplementedOpensourceServer must be embedded to have forward compatible implementations.
type UnimplementedOpensourceServer struct {
}

func (UnimplementedOpensourceServer) GetOpensource(context.Context, *GetOpensourceRequest) (*GetOpensourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpensource not implemented")
}
func (UnimplementedOpensourceServer) GetAllOpensources(context.Context, *GetAllOpensourcesRequest) (*GetAllOpensourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOpensources not implemented")
}
func (UnimplementedOpensourceServer) CreateOpensource(context.Context, *CreateOpensourceRequest) (*CreateOpensourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpensource not implemented")
}
func (UnimplementedOpensourceServer) DeleteOpensource(context.Context, *DeleteOpensourceRequest) (*DeleteOpensourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpensource not implemented")
}
func (UnimplementedOpensourceServer) UpdateOpensource(context.Context, *UpdateOpensourceRequest) (*UpdateOpensourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpensource not implemented")
}
func (UnimplementedOpensourceServer) mustEmbedUnimplementedOpensourceServer() {}

// UnsafeOpensourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpensourceServer will
// result in compilation errors.
type UnsafeOpensourceServer interface {
	mustEmbedUnimplementedOpensourceServer()
}

func RegisterOpensourceServer(s grpc.ServiceRegistrar, srv OpensourceServer) {
	s.RegisterService(&Opensource_ServiceDesc, srv)
}

func _Opensource_GetOpensource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpensourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpensourceServer).GetOpensource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Opensource/GetOpensource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpensourceServer).GetOpensource(ctx, req.(*GetOpensourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opensource_GetAllOpensources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOpensourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpensourceServer).GetAllOpensources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Opensource/GetAllOpensources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpensourceServer).GetAllOpensources(ctx, req.(*GetAllOpensourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opensource_CreateOpensource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpensourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpensourceServer).CreateOpensource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Opensource/CreateOpensource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpensourceServer).CreateOpensource(ctx, req.(*CreateOpensourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opensource_DeleteOpensource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpensourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpensourceServer).DeleteOpensource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Opensource/DeleteOpensource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpensourceServer).DeleteOpensource(ctx, req.(*DeleteOpensourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opensource_UpdateOpensource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpensourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpensourceServer).UpdateOpensource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Opensource/UpdateOpensource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpensourceServer).UpdateOpensource(ctx, req.(*UpdateOpensourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Opensource_ServiceDesc is the grpc.ServiceDesc for Opensource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Opensource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Opensource",
	HandlerType: (*OpensourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpensource",
			Handler:    _Opensource_GetOpensource_Handler,
		},
		{
			MethodName: "GetAllOpensources",
			Handler:    _Opensource_GetAllOpensources_Handler,
		},
		{
			MethodName: "CreateOpensource",
			Handler:    _Opensource_CreateOpensource_Handler,
		},
		{
			MethodName: "DeleteOpensource",
			Handler:    _Opensource_DeleteOpensource_Handler,
		},
		{
			MethodName: "UpdateOpensource",
			Handler:    _Opensource_UpdateOpensource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opensource.proto",
}
